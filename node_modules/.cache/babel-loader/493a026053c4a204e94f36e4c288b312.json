{"ast":null,"code":"// Copyright (c) .NET Foundation. All rights reserved.\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) {\n      if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n  }\n\n  return t;\n};\n\nimport { HttpError, TimeoutError } from \"./Errors\";\nimport { LogLevel } from \"./ILogger\";\n/** Represents an HTTP response. */\n\nvar HttpResponse =\n/** @class */\nfunction () {\n  function HttpResponse(statusCode, statusText, content) {\n    this.statusCode = statusCode;\n    this.statusText = statusText;\n    this.content = content;\n  }\n\n  return HttpResponse;\n}();\n\nexport { HttpResponse };\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\n\nvar HttpClient =\n/** @class */\nfunction () {\n  function HttpClient() {}\n\n  HttpClient.prototype.get = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"GET\",\n      url: url\n    }));\n  };\n\n  HttpClient.prototype.post = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"POST\",\n      url: url\n    }));\n  };\n\n  HttpClient.prototype.delete = function (url, options) {\n    return this.send(__assign({}, options, {\n      method: \"DELETE\",\n      url: url\n    }));\n  };\n\n  return HttpClient;\n}();\n\nexport { HttpClient };\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\n\nvar DefaultHttpClient =\n/** @class */\nfunction (_super) {\n  __extends(DefaultHttpClient, _super);\n  /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\n\n\n  function DefaultHttpClient(logger) {\n    var _this = _super.call(this) || this;\n\n    _this.logger = logger;\n    return _this;\n  }\n  /** @inheritDoc */\n\n\n  DefaultHttpClient.prototype.send = function (request) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.open(request.method, request.url, true);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\"); // Explicitly setting the Content-Type header for React Native on Android platform.\n\n      xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\n\n      if (request.headers) {\n        Object.keys(request.headers).forEach(function (header) {\n          return xhr.setRequestHeader(header, request.headers[header]);\n        });\n      }\n\n      if (request.responseType) {\n        xhr.responseType = request.responseType;\n      }\n\n      if (request.abortSignal) {\n        request.abortSignal.onabort = function () {\n          xhr.abort();\n        };\n      }\n\n      if (request.timeout) {\n        xhr.timeout = request.timeout;\n      }\n\n      xhr.onload = function () {\n        if (request.abortSignal) {\n          request.abortSignal.onabort = null;\n        }\n\n        if (xhr.status >= 200 && xhr.status < 300) {\n          resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\n        } else {\n          reject(new HttpError(xhr.statusText, xhr.status));\n        }\n      };\n\n      xhr.onerror = function () {\n        _this.logger.log(LogLevel.Warning, \"Error from HTTP request. \" + xhr.status + \": \" + xhr.statusText);\n\n        reject(new HttpError(xhr.statusText, xhr.status));\n      };\n\n      xhr.ontimeout = function () {\n        _this.logger.log(LogLevel.Warning, \"Timeout from HTTP request.\");\n\n        reject(new TimeoutError());\n      };\n\n      xhr.send(request.content || \"\");\n    });\n  };\n\n  return DefaultHttpClient;\n}(HttpClient);\n\nexport { DefaultHttpClient };","map":{"version":3,"sources":["../../src/HttpClient.ts"],"names":[],"mappings":"AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAS,SAAT,EAAoB,YAApB,QAAwC,UAAxC;AACA,SAAkB,QAAlB,QAAkC,WAAlC;AA0BA;;AACA,IAAA,YAAA;AAAA;AAAA,YAAA;AA6BI,WAAA,YAAA,CACoB,UADpB,EAEoB,UAFpB,EAGoB,OAHpB,EAGkD;AAF9B,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,UAAA,GAAA,UAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACnB;;AACL,SAAA,YAAA;AAAC,CAlCD,EAAA;;;AAoCA;;;AAGG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAyEC;;AA1DU,EAAA,UAAA,CAAA,SAAA,CAAA,GAAA,GAAP,UAAW,GAAX,EAAwB,OAAxB,EAA6C;AACzC,WAAO,KAAK,IAAL,CAAS,QAAA,CAAA,EAAA,EACT,OADS,EACF;AACV,MAAA,MAAM,EAAE,KADE;AAEV,MAAA,GAAG,EAAA;AAFO,KADE,CAAT,CAAP;AAKH,GANM;;AAsBA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,GAAZ,EAAyB,OAAzB,EAA8C;AAC1C,WAAO,KAAK,IAAL,CAAS,QAAA,CAAA,EAAA,EACT,OADS,EACF;AACV,MAAA,MAAM,EAAE,MADE;AAEV,MAAA,GAAG,EAAA;AAFO,KADE,CAAT,CAAP;AAKH,GANM;;AAsBA,EAAA,UAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,GAAd,EAA2B,OAA3B,EAAgD;AAC5C,WAAO,KAAK,IAAL,CAAS,QAAA,CAAA,EAAA,EACT,OADS,EACF;AACV,MAAA,MAAM,EAAE,QADE;AAEV,MAAA,GAAG,EAAA;AAFO,KADE,CAAT,CAAP;AAKH,GANM;;AAcX,SAAA,UAAA;AAAC,CAzED,EAAA;;;AA2EA;;AACA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;AAGnC;;;AACA,WAAA,iBAAA,CAAmB,MAAnB,EAAkC;AAAlC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAEI,IAAA,KAAI,CAAC,MAAL,GAAc,MAAd;;AACH;AAED;;;AACO,EAAA,iBAAA,CAAA,SAAA,CAAA,IAAA,GAAP,UAAY,OAAZ,EAAgC;AAAhC,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAA0B,UAAC,OAAD,EAAU,MAAV,EAAgB;AAC7C,UAAM,GAAG,GAAG,IAAI,cAAJ,EAAZ;AAEA,MAAA,GAAG,CAAC,IAAJ,CAAS,OAAO,CAAC,MAAjB,EAAyB,OAAO,CAAC,GAAjC,EAAsC,IAAtC;AACA,MAAA,GAAG,CAAC,eAAJ,GAAsB,IAAtB;AACA,MAAA,GAAG,CAAC,gBAAJ,CAAqB,kBAArB,EAAyC,gBAAzC,EAL6C,CAM7C;;AACA,MAAA,GAAG,CAAC,gBAAJ,CAAqB,cAArB,EAAqC,0BAArC;;AAEA,UAAI,OAAO,CAAC,OAAZ,EAAqB;AACjB,QAAA,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAApB,EACK,OADL,CACa,UAAC,MAAD,EAAO;AAAK,iBAAA,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B,OAAO,CAAC,OAAR,CAA7B,MAA6B,CAA7B,CAAA;AAAqD,SAD9E;AAEH;;AAED,UAAI,OAAO,CAAC,YAAZ,EAA0B;AACtB,QAAA,GAAG,CAAC,YAAJ,GAAmB,OAAO,CAAC,YAA3B;AACH;;AAED,UAAI,OAAO,CAAC,WAAZ,EAAyB;AACrB,QAAA,OAAO,CAAC,WAAR,CAAoB,OAApB,GAA8B,YAAA;AAC1B,UAAA,GAAG,CAAC,KAAJ;AACH,SAFD;AAGH;;AAED,UAAI,OAAO,CAAC,OAAZ,EAAqB;AACjB,QAAA,GAAG,CAAC,OAAJ,GAAc,OAAO,CAAC,OAAtB;AACH;;AAED,MAAA,GAAG,CAAC,MAAJ,GAAa,YAAA;AACT,YAAI,OAAO,CAAC,WAAZ,EAAyB;AACrB,UAAA,OAAO,CAAC,WAAR,CAAoB,OAApB,GAA8B,IAA9B;AACH;;AAED,YAAI,GAAG,CAAC,MAAJ,IAAc,GAAd,IAAqB,GAAG,CAAC,MAAJ,GAAa,GAAtC,EAA2C;AACvC,UAAA,OAAO,CAAC,IAAI,YAAJ,CAAiB,GAAG,CAAC,MAArB,EAA6B,GAAG,CAAC,UAAjC,EAA6C,GAAG,CAAC,QAAJ,IAAgB,GAAG,CAAC,YAAjE,CAAD,CAAP;AACH,SAFD,MAEO;AACH,UAAA,MAAM,CAAC,IAAI,SAAJ,CAAc,GAAG,CAAC,UAAlB,EAA8B,GAAG,CAAC,MAAlC,CAAD,CAAN;AACH;AACJ,OAVD;;AAYA,MAAA,GAAG,CAAC,OAAJ,GAAc,YAAA;AACV,QAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,OAAzB,EAAkC,8BAA4B,GAAG,CAAC,MAAhC,GAAsC,IAAtC,GAA2C,GAAG,CAAC,UAAjF;;AACA,QAAA,MAAM,CAAC,IAAI,SAAJ,CAAc,GAAG,CAAC,UAAlB,EAA8B,GAAG,CAAC,MAAlC,CAAD,CAAN;AACH,OAHD;;AAKA,MAAA,GAAG,CAAC,SAAJ,GAAgB,YAAA;AACZ,QAAA,KAAI,CAAC,MAAL,CAAY,GAAZ,CAAgB,QAAQ,CAAC,OAAzB,EAAkC,4BAAlC;;AACA,QAAA,MAAM,CAAC,IAAI,YAAJ,EAAD,CAAN;AACH,OAHD;;AAKA,MAAA,GAAG,CAAC,IAAJ,CAAS,OAAO,CAAC,OAAR,IAAmB,EAA5B;AACH,KAnDM,CAAP;AAoDH,GArDM;;AAsDX,SAAA,iBAAA;AAAC,CAhED,CAAuC,UAAvC,CAAA","sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.\r\n\r\nimport { AbortSignal } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { ILogger, LogLevel } from \"./ILogger\";\r\n\r\n/** Represents an HTTP request. */\r\nexport interface HttpRequest {\r\n    /** The HTTP method to use for the request. */\r\n    method?: string;\r\n\r\n    /** The URL for the request. */\r\n    url?: string;\r\n\r\n    /** The body content for the request. May be a string or an ArrayBuffer (for binary data). */\r\n    content?: string | ArrayBuffer;\r\n\r\n    /** An object describing headers to apply to the request. */\r\n    headers?: { [key: string]: string };\r\n\r\n    /** The XMLHttpRequestResponseType to apply to the request. */\r\n    responseType?: XMLHttpRequestResponseType;\r\n\r\n    /** An AbortSignal that can be monitored for cancellation. */\r\n    abortSignal?: AbortSignal;\r\n\r\n    /** The time to wait for the request to complete before throwing a TimeoutError. Measured in milliseconds. */\r\n    timeout?: number;\r\n}\r\n\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     */\r\n    constructor(statusCode: number);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code and message.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and string content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {string} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: string);\r\n\r\n    /** Constructs a new instance of {@link @aspnet/signalr.HttpResponse} with the specified status code, message and binary content.\r\n     *\r\n     * @param {number} statusCode The status code of the response.\r\n     * @param {string} statusText The status message of the response.\r\n     * @param {ArrayBuffer} content The content of the response.\r\n     */\r\n    constructor(statusCode: number, statusText: string, content: ArrayBuffer);\r\n    constructor(\r\n        public readonly statusCode: number,\r\n        public readonly statusText?: string,\r\n        public readonly content?: string | ArrayBuffer) {\r\n    }\r\n}\r\n\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport abstract class HttpClient {\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP GET request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public get(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public get(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP POST request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public post(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public post(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string): Promise<HttpResponse>;\r\n\r\n    /** Issues an HTTP DELETE request to the specified URL, returning a Promise that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {string} url The URL for the request.\r\n     * @param {HttpRequest} options Additional options to configure the request. The 'url' field in this object will be overridden by the url parameter.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an {@link @aspnet/signalr.HttpResponse} describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public delete(url: string, options: HttpRequest): Promise<HttpResponse>;\r\n    public delete(url: string, options?: HttpRequest): Promise<HttpResponse> {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n\r\n    /** Issues an HTTP request to the specified URL, returning a {@link Promise} that resolves with an {@link @aspnet/signalr.HttpResponse} representing the result.\r\n     *\r\n     * @param {HttpRequest} request An {@link @aspnet/signalr.HttpRequest} describing the request to send.\r\n     * @returns {Promise<HttpResponse>} A Promise that resolves with an HttpResponse describing the response, or rejects with an Error indicating a failure.\r\n     */\r\n    public abstract send(request: HttpRequest): Promise<HttpResponse>;\r\n}\r\n\r\n/** Default implementation of {@link @aspnet/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    private readonly logger: ILogger;\r\n\r\n    /** Creates a new instance of the {@link @aspnet/signalr.DefaultHttpClient}, using the provided {@link @aspnet/signalr.ILogger} to log messages. */\r\n    public constructor(logger: ILogger) {\r\n        super();\r\n        this.logger = logger;\r\n    }\r\n\r\n    /** @inheritDoc */\r\n    public send(request: HttpRequest): Promise<HttpResponse> {\r\n        return new Promise<HttpResponse>((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = true;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n\r\n            if (request.headers) {\r\n                Object.keys(request.headers)\r\n                    .forEach((header) => xhr.setRequestHeader(header, request.headers[header]));\r\n            }\r\n\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                };\r\n            }\r\n\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                } else {\r\n                    reject(new HttpError(xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n\r\n            xhr.onerror = () => {\r\n                this.logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n\r\n            xhr.ontimeout = () => {\r\n                this.logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n\r\n            xhr.send(request.content || \"\");\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}